

header {
  background-color: orange;
}

#logo {
  font-size: 3rem;
}

.item {
  background-color: brown;
}

.half-width {
  width: 50%;
}

.highlight-color {
  color: white;
  font-weight: bold;
  font-size: 3rem;
}

/* .item:nth-child(2) {
  background-color: brown;
}

.item:nth-child(3) {
  background-color: brown;
  width: 50%;
}

.item:nth-child(4) {
  background-color: brown;
  width: 50%;
  color: white;
  font-weight: bold;
  font-size: 3rem;
} 

이렇게 작성하면 중복코드가 많아 유지보수가 힘들수있다 */

main section p {
  background-color: blue;
}

main > p {
  background-color: aqua;
}

/*  > 가 들어가면 바로아래 자식요소만 선택 */

/* header nav > ul > li > a {
  background-color: green;
} */

main > article h1 + article {
  width: 10%;
  border-radius: 50%;
}

/* main 직계자식 article 안에있는 h1의 인접형제(+) 인 article 선택(첫번째article) */

main > article h1 + article ~ article {
  border-radius: 0 50% 0 0;
  height: 30vh;
}
/* ~가 들어가면 일반형제 선택자 */
/* border-radius : 왼쪽위, 오른쪽위 , 오른쪽아래, 왼쪽아래 순서로 적용 */

header, main, footer {
  width: 30%;
  background-color: gray;
}

[target] {
  text-decoration: none;
}
/* []는 속성을 선택한다 */

/* [target="_blank"] {
  background-color: orange;
} */
/* target 안에 _blank라는 속성값만 선택 */

[class^="side"] {
  font-size: 5rem;
}
/* ^ = 속성이 주어진 값으로 시작하는 모든 요소 
class에 side로 시작하는 모든 요소*/

header > a:hover {
  color: orange;
}

:link {
  text-decoration: none;
  color: brown;
}
/* 아직 방문하지 않은 링크 */

:visited {
  color: yellow;
}
/* 사용자가 이미 방문한 링크 */

a:focus {
  background-color: blue;
  color: white;
}
/* focus는 a태그, button태그, input태그에 모두 적용되므로 항상 앞에 선택자 써주기 
tab키 눌렀을때 적용되는 스타일*/

a:active { 
  background: black;
  color: red;
}
/* 클릭할때 적용되는 스타일 */

address:focus-within {
  background-color: blueviolet;
}
/* address에 있는 a태그가 포커스될때 a태그의 부모요소(address)가 스타일 변경됨 */

input, button {
  outline: none;
}
/* 포커스 기능 제거 */

input:focus, button:focus {
  background-color: red;
}
/* 포커스 스타일 커스터마이징 */

/* address p:first-child, address p:last-child {
  background-color: orange;
} */

aside nav ul li:nth-child(2n+1) {
  background: black;
}
/* 홀수번째 요소 선택=(odd)  2n은 2씩증가 +1은 1번째부터,
짝수는 2n =(even) 로 주면 됨 */

aside h3::before {
  content: '******';
  font-size: 2rem;
  color: skyblue;
  background-color: red;
  width: 600px; height: 400px;
}
aside h3::after {
  content: '&&&&&&&&';
  font-size: 5rem;
  color: goldenrod;
}
/* 가상으로 만드는 element, before은 앞에 after는 뒤에 붙음 
 인라인요소라 너비,높이 설정 불가*/

address p:not(:nth-child(2)) {
  background-color: brown;
}
/* nth-child 2번인 전화번호를 빼고 background-color가 브라운 */

/* main *:not(main > p) {
  background-color: darkcyan;
} */
/* 메인에 있는 요소중 p빼고 적용 */
main > *:not(article) {
  background-color: blue;
}
/* main *:not으로 작성하면 article안에 h2,p가 있어서 빼고 적용이 안됨 
>로 직계자식을 지정해줘야 잘됨!*/


main .item:nth-child(2) {
  background-color: orange;
}

/* nth-child : main안의 .item의 부모요소인 article에서의 2번째 자식을 선택 
(h1, article 해서 2번째 article이 선택됨 */

main .item:nth-of-type(2) {
  background-color: bisque;
}
/* nth-of-type : main안의 item의 부모요소인 article에서의 2번째 .item인 aritcle선택 
h1은 선택되지 않는다.*/